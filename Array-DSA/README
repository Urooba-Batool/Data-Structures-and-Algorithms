# Arrays in DSA ðŸ“š

This folder contains programs, examples, and exercises related to **Arrays** â€“ one of the most fundamental data structures in Computer Science.

---

## ðŸ“– What is an Array?
An **array** is a collection of elements stored in **contiguous memory locations**.  
Each element can be accessed directly using an **index**, which makes arrays one of the fastest data structures for **random access**.

---

## ðŸ§  Key Concepts

### 1. **Indexing**
- Arrays use **zero-based indexing** in most programming languages.
- Example:  
  `arr[0]` â†’ first element,  
  `arr[n-1]` â†’ last element (if array has `n` elements)

### 2. **Static Size**
- The size of an array is usually **fixed** at the time of creation.
- Cannot grow or shrink dynamically (use dynamic arrays like `List<T>` in C# if resizing is needed).

### 3. **Operations**
Some of the most common operations on arrays:
| Operation | Description | Time Complexity |
|----------|-------------|----------------|
| **Traversal** | Visit each element once | `O(n)` |
| **Access** | Get element at index `i` | `O(1)` |
| **Insertion** | Add element (at end or in middle) | `O(n)` (shifting needed) |
| **Deletion** | Remove element (shifting needed) | `O(n)` |
| **Searching** | Find element value | `O(n)` (Linear) / `O(log n)` (Binary on sorted array) |

### 4. **Memory Layout**
- All elements are stored **next to each other** in memory.
- This makes accessing elements by index extremely fast (direct address calculation).

### 5. **Types of Arrays**
- **1D Arrays** â†’ Simple list of elements  
- **2D Arrays (Matrices)** â†’ Grid-like structure, useful for matrix operations  
- **Multidimensional Arrays** â†’ Arrays with more than 2 dimensions (rare but useful in advanced problems)

---

## ðŸ›  Examples Included in This Folder
- **Basic Array Input & Output**
- **2D Array Operations** (Matrix Addition, Subtraction, Multiplication)
- **Practice Problems** (Finding Max/Min, Sum of Elements, Reversing Array)

---

## ðŸ’¡ Why Arrays Are Important
Arrays form the foundation of many advanced data structures such as:
- **Strings**
- **Stacks & Queues**
- **Heaps**
- **Hash Tables**

Understanding arrays is crucial before moving on to **Linked Lists**, **Trees**, and **Graphs**.

---

## ðŸš€ How to Run
1. Clone the repository:
   ```bash
   git clone https://github.com/<your-username>/DSA.git
